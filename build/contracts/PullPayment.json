{
  "contractName": "PullPayment",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdrawPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.\",\"kind\":\"dev\",\"methods\":{\"payments(address)\":{\"details\":\"Returns the payments owed to an address.\",\"params\":{\"dest\":\"The creditor's address.\"}},\"withdrawPayments(address)\":{\"details\":\"Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.\",\"params\":{\"payee\":\"Whose payments will be withdrawn. Causes the `escrow` to emit a {Withdrawn} event.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/lib/openzeppelin/contracts/security/PullPayment.sol\":\"PullPayment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"project:/contracts/lib/openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xaa0fa1b4beba6ab736b2434ec16dda4ff4d707271a4348a989c3f30af40d7701\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://14c9c95010c805386c9da31a86675a6edea2a08226ceb687f463be2373ae42bf\",\"dweb:/ipfs/QmdcyysRPeYJzUSaWiuabyWw22jKpth1xV8CFW8o1gtoE6\"]},\"project:/contracts/lib/openzeppelin/contracts/security/PullPayment.sol\":{\"keccak256\":\"0xc4d7ce5963f070b6c1399271a36ba583452d27563c902cb3f1452216245b23a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd8f37c291d19cd0f411d1c947df26bacfc4c1da1774c9b6a249768389a98d9a\",\"dweb:/ipfs/QmUd1Q4PKRDuR9gsuYBKd8qaVGu479f7JqAsAZJxnX9wS7\"]},\"project:/contracts/lib/openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x1878f928c6b9c5f9218b20af5eceefc2f593e2a9fddfe379cba8b89a9a7a34ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75f28644cc4ba5980823794abc13a87787a2b33b1e5c6ed9f88f390ea5c19078\",\"dweb:/ipfs/QmPERez2GJNhithYeghdHZtLkcLWCybxcScC22iHanJ4UF\"]},\"project:/contracts/lib/openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]},\"project:/contracts/lib/openzeppelin/contracts/utils/escrow/Escrow.sol\":{\"keccak256\":\"0xecf9fb7ec928f38535d91737be1030aefa82c52f1800a521d10258f28023a5e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://055acf86a09981d6cbf7010c1cd33f3e2fffa89b8974514bbb45eb9d51c1a89e\",\"dweb:/ipfs/QmYN2hjLBZ5T2WmVkcUePK3qLMtzw4eWszpuPGxQ1f6ism\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/PullPayment.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/escrow/Escrow.sol\";\r\n\r\n/**\r\n * @dev Simple implementation of a\r\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\r\n * strategy, where the paying contract doesn't interact directly with the\r\n * receiver account, which must withdraw its payments itself.\r\n *\r\n * Pull-payments are often considered the best practice when it comes to sending\r\n * Ether, security-wise. It prevents recipients from blocking execution, and\r\n * eliminates reentrancy concerns.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\r\n * instead of Solidity's `transfer` function. Payees can query their due\r\n * payments with {payments}, and retrieve them with {withdrawPayments}.\r\n */\r\nabstract contract PullPayment {\r\n    Escrow private immutable _escrow;\r\n\r\n    constructor() {\r\n        _escrow = new Escrow();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\r\n     *\r\n     * Note that _any_ account can call this function, not just the `payee`.\r\n     * This means that contracts unaware of the `PullPayment` protocol can still\r\n     * receive funds this way, by having a separate account call\r\n     * {withdrawPayments}.\r\n     *\r\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\r\n     * Make sure you trust the recipient, or are either following the\r\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\r\n     *\r\n     * @param payee Whose payments will be withdrawn.\r\n     *\r\n     * Causes the `escrow` to emit a {Withdrawn} event.\r\n     */\r\n    function withdrawPayments(address payable payee) public virtual {\r\n        _escrow.withdraw(payee);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the payments owed to an address.\r\n     * @param dest The creditor's address.\r\n     */\r\n    function payments(address dest) public view returns (uint256) {\r\n        return _escrow.depositsOf(dest);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\r\n     * there is no danger of them being spent before withdrawal.\r\n     *\r\n     * @param dest The destination address of the funds.\r\n     * @param amount The amount to transfer.\r\n     *\r\n     * Causes the `escrow` to emit a {Deposited} event.\r\n     */\r\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\r\n        _escrow.deposit{value: amount}(dest);\r\n    }\r\n}\r\n",
  "sourcePath": "D:\\work\\www\\yopu_dapp_nft\\contracts\\lib\\openzeppelin\\contracts\\security\\PullPayment.sol",
  "ast": {
    "absolutePath": "project:/contracts/lib/openzeppelin/contracts/security/PullPayment.sol",
    "exportedSymbols": {
      "Address": [
        30926
      ],
      "Context": [
        31314
      ],
      "Escrow": [
        33328
      ],
      "Ownable": [
        875
      ],
      "PullPayment": [
        21545
      ]
    },
    "id": 21546,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 21484,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "96:23:180"
      },
      {
        "absolutePath": "project:/contracts/lib/openzeppelin/contracts/utils/escrow/Escrow.sol",
        "file": "../utils/escrow/Escrow.sol",
        "id": 21485,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 21546,
        "sourceUnit": 33329,
        "src": "123:36:180",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "PullPayment",
        "contractDependencies": [
          33328
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 21486,
          "nodeType": "StructuredDocumentation",
          "src": "163:966:180",
          "text": " @dev Simple implementation of a\n https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n strategy, where the paying contract doesn't interact directly with the\n receiver account, which must withdraw its payments itself.\n Pull-payments are often considered the best practice when it comes to sending\n Ether, security-wise. It prevents recipients from blocking execution, and\n eliminates reentrancy concerns.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n instead of Solidity's `transfer` function. Payees can query their due\n payments with {payments}, and retrieve them with {withdrawPayments}."
        },
        "fullyImplemented": true,
        "id": 21545,
        "linearizedBaseContracts": [
          21545
        ],
        "name": "PullPayment",
        "nameLocation": "1149:11:180",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 21489,
            "mutability": "immutable",
            "name": "_escrow",
            "nameLocation": "1193:7:180",
            "nodeType": "VariableDeclaration",
            "scope": 21545,
            "src": "1168:32:180",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Escrow_$33328",
              "typeString": "contract Escrow"
            },
            "typeName": {
              "id": 21488,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 21487,
                "name": "Escrow",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 33328,
                "src": "1168:6:180"
              },
              "referencedDeclaration": 33328,
              "src": "1168:6:180",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Escrow_$33328",
                "typeString": "contract Escrow"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 21499,
              "nodeType": "Block",
              "src": "1223:41:180",
              "statements": [
                {
                  "expression": {
                    "id": 21497,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 21492,
                      "name": "_escrow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21489,
                      "src": "1234:7:180",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$33328",
                        "typeString": "contract Escrow"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 21495,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1244:10:180",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Escrow_$33328_$",
                          "typeString": "function () returns (contract Escrow)"
                        },
                        "typeName": {
                          "id": 21494,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 21493,
                            "name": "Escrow",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 33328,
                            "src": "1248:6:180"
                          },
                          "referencedDeclaration": 33328,
                          "src": "1248:6:180",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$33328",
                            "typeString": "contract Escrow"
                          }
                        }
                      },
                      "id": 21496,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1244:12:180",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$33328",
                        "typeString": "contract Escrow"
                      }
                    },
                    "src": "1234:22:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Escrow_$33328",
                      "typeString": "contract Escrow"
                    }
                  },
                  "id": 21498,
                  "nodeType": "ExpressionStatement",
                  "src": "1234:22:180"
                }
              ]
            },
            "id": 21500,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 21490,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1220:2:180"
            },
            "returnParameters": {
              "id": 21491,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1223:0:180"
            },
            "scope": 21545,
            "src": "1209:55:180",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 21512,
              "nodeType": "Block",
              "src": "2058:42:180",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 21509,
                        "name": "payee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21503,
                        "src": "2086:5:180",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 21506,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21489,
                        "src": "2069:7:180",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$33328",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 21508,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdraw",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 33327,
                      "src": "2069:16:180",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable) external"
                      }
                    },
                    "id": 21510,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2069:23:180",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 21511,
                  "nodeType": "ExpressionStatement",
                  "src": "2069:23:180"
                }
              ]
            },
            "documentation": {
              "id": 21501,
              "nodeType": "StructuredDocumentation",
              "src": "1272:716:180",
              "text": " @dev Withdraw accumulated payments, forwarding all gas to the recipient.\n Note that _any_ account can call this function, not just the `payee`.\n This means that contracts unaware of the `PullPayment` protocol can still\n receive funds this way, by having a separate account call\n {withdrawPayments}.\n WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n Make sure you trust the recipient, or are either following the\n checks-effects-interactions pattern or using {ReentrancyGuard}.\n @param payee Whose payments will be withdrawn.\n Causes the `escrow` to emit a {Withdrawn} event."
            },
            "functionSelector": "31b3eb94",
            "id": 21513,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawPayments",
            "nameLocation": "2003:16:180",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 21504,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21503,
                  "mutability": "mutable",
                  "name": "payee",
                  "nameLocation": "2036:5:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 21513,
                  "src": "2020:21:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 21502,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2020:15:180",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2019:23:180"
            },
            "returnParameters": {
              "id": 21505,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2058:0:180"
            },
            "scope": 21545,
            "src": "1994:106:180",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 21526,
              "nodeType": "Block",
              "src": "2286:50:180",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 21523,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21516,
                        "src": "2323:4:180",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 21521,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21489,
                        "src": "2304:7:180",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$33328",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 21522,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "depositsOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 33270,
                      "src": "2304:18:180",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 21524,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2304:24:180",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 21520,
                  "id": 21525,
                  "nodeType": "Return",
                  "src": "2297:31:180"
                }
              ]
            },
            "documentation": {
              "id": 21514,
              "nodeType": "StructuredDocumentation",
              "src": "2108:110:180",
              "text": " @dev Returns the payments owed to an address.\n @param dest The creditor's address."
            },
            "functionSelector": "e2982c21",
            "id": 21527,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "payments",
            "nameLocation": "2233:8:180",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 21517,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21516,
                  "mutability": "mutable",
                  "name": "dest",
                  "nameLocation": "2250:4:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 21527,
                  "src": "2242:12:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 21515,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2242:7:180",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2241:14:180"
            },
            "returnParameters": {
              "id": 21520,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21519,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 21527,
                  "src": "2277:7:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 21518,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2277:7:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2276:9:180"
            },
            "scope": 21545,
            "src": "2224:112:180",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 21543,
              "nodeType": "Block",
              "src": "2841:55:180",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 21540,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21530,
                        "src": "2883:4:180",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 21535,
                          "name": "_escrow",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 21489,
                          "src": "2852:7:180",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$33328",
                            "typeString": "contract Escrow"
                          }
                        },
                        "id": 21537,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "deposit",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 33295,
                        "src": "2852:15:180",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
                          "typeString": "function (address) payable external"
                        }
                      },
                      "id": 21539,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 21538,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 21532,
                          "src": "2875:6:180",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "2852:30:180",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
                        "typeString": "function (address) payable external"
                      }
                    },
                    "id": 21541,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2852:36:180",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 21542,
                  "nodeType": "ExpressionStatement",
                  "src": "2852:36:180"
                }
              ]
            },
            "documentation": {
              "id": 21528,
              "nodeType": "StructuredDocumentation",
              "src": "2344:420:180",
              "text": " @dev Called by the payer to store the sent amount as credit to be pulled.\n Funds sent in this way are stored in an intermediate {Escrow} contract, so\n there is no danger of them being spent before withdrawal.\n @param dest The destination address of the funds.\n @param amount The amount to transfer.\n Causes the `escrow` to emit a {Deposited} event."
            },
            "id": 21544,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_asyncTransfer",
            "nameLocation": "2779:14:180",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 21533,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21530,
                  "mutability": "mutable",
                  "name": "dest",
                  "nameLocation": "2802:4:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 21544,
                  "src": "2794:12:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 21529,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2794:7:180",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21532,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2816:6:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 21544,
                  "src": "2808:14:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 21531,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2808:7:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2793:30:180"
            },
            "returnParameters": {
              "id": 21534,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2841:0:180"
            },
            "scope": 21545,
            "src": "2770:126:180",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 21546,
        "src": "1131:1768:180",
        "usedErrors": []
      }
    ],
    "src": "96:2805:180"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.14+commit.80d49f37.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-06-28T15:05:48.485Z",
  "devdoc": {
    "details": "Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.",
    "kind": "dev",
    "methods": {
      "payments(address)": {
        "details": "Returns the payments owed to an address.",
        "params": {
          "dest": "The creditor's address."
        }
      },
      "withdrawPayments(address)": {
        "details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.",
        "params": {
          "payee": "Whose payments will be withdrawn. Causes the `escrow` to emit a {Withdrawn} event."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}