{
  "contractName": "CrossChainEnabledAMB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"details\":\"https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB] specialization or the {CrossChainEnabled} abstraction. As of february 2020, AMB bridges are available between the following chains: - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH \\u21cc xDai] - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH \\u21cc qDai] - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH \\u21cc ETC] - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH \\u21cc BSC] - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH \\u21cc POA] - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC \\u21cc xDai] - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA \\u21cc xDai] - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby \\u21cc xDai] - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan \\u21cc Sokol] _Available since v4.6._\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"stateVariables\":{\"_bridge\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/lib/openzeppelin/contracts/crosschain/amb/CrossChainEnabledAMB.sol\":\"CrossChainEnabledAMB\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"project:/contracts/lib/openzeppelin/contracts/crosschain/CrossChainEnabled.sol\":{\"keccak256\":\"0xe3796f669986f88c231262fc454399c7068123d59c6d2721b3e8807e1b5490e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://01dae8a0bedc02610d1eb581a1114ed87afc5f6c0de59b4ffa91fb3d30fc94a7\",\"dweb:/ipfs/QmTEs6tt5TUBxQKnFw4uNPn7ZE59uz3E2hhVKCnKvpzwPh\"]},\"project:/contracts/lib/openzeppelin/contracts/crosschain/amb/CrossChainEnabledAMB.sol\":{\"keccak256\":\"0x42b1609e36ac87d6229a13404bee22a808613fcc70c6e842f5b77aa7d8d5fa44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e61650728fd1d9ca2290640d1ef3aa8ca364b7a67101eacddb8aae2acae8429\",\"dweb:/ipfs/QmSkKEKFYRboVKENYHswoeXsNecTwVYFbAw9ka3rrPY3sL\"]},\"project:/contracts/lib/openzeppelin/contracts/crosschain/amb/LibAMB.sol\":{\"keccak256\":\"0x4286b9007b0dba2b7f2125cfa2d975e8afc000f95e8a6335e93490c513ebacc7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://68c9ae8ebd13565779f3fad2bf05e38a379161b8cc3f1c8899339b2d0edbbed1\",\"dweb:/ipfs/QmQXc6WWPx934QbspccDY4GG4jnUgNUbiJ74YpwnaA36cH\"]},\"project:/contracts/lib/openzeppelin/contracts/crosschain/errors.sol\":{\"keccak256\":\"0x9d3ffe3bc59c2dac36d93cb4641ffeaa98b96cce588d106efe050a0b67b4d902\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf8c1e49412c6975de84fe2c72f6785f139d36843aaa623bc9964003748b3757\",\"dweb:/ipfs/QmcDPdSYsWHGnMZB6yHH8Tczr16QVjd8TjPcMVDdyvPV1W\"]},\"project:/contracts/lib/openzeppelin/contracts/vendor/amb/IAMB.sol\":{\"keccak256\":\"0x6465aca00eb1dcb80e8c1ee25dab810bce5471c462fc279adfcecfdbb860a42a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e15f5eeafc82ad37c41f863b61755c39e969040f903578e5fb756e633c198b00\",\"dweb:/ipfs/QmS8JWfzvepeNmb8pu6LpWVLwmWBDZTGLUZxxZKeMWLRXh\"]}},\"version\":1}",
  "bytecode": "0x60a0604052348015600f57600080fd5b5060405160bc38038060bc833981016040819052602a91603a565b6001600160a01b03166080526068565b600060208284031215604b57600080fd5b81516001600160a01b0381168114606157600080fd5b9392505050565b608051603f607d60003960005050603f6000f3fe6080604052600080fdfea26469706673582212209525fd5efd8fdb27c844b8fd47837f322eb849d0ce0cced1c1a1cee232c5366664736f6c634300080e0033",
  "deployedBytecode": "0x6080604052600080fdfea26469706673582212209525fd5efd8fdb27c844b8fd47837f322eb849d0ce0cced1c1a1cee232c5366664736f6c634300080e0033",
  "immutableReferences": {},
  "generatedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:306:273",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:273",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "95:209:273",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "141:16:273",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "150:1:273",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "153:1:273",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "143:6:273"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "143:12:273"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "143:12:273"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "116:7:273"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "125:9:273"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "112:3:273"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "112:23:273"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "137:2:273",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "108:3:273"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "108:32:273"
                  },
                  "nodeType": "YulIf",
                  "src": "105:52:273"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "166:29:273",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "185:9:273"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "179:5:273"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "179:16:273"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "170:5:273",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "258:16:273",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "267:1:273",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "270:1:273",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "260:6:273"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "260:12:273"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "260:12:273"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "217:5:273"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "228:5:273"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "243:3:273",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "248:1:273",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "239:3:273"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "239:11:273"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "252:1:273",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "235:3:273"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "235:19:273"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "224:3:273"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "224:31:273"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "214:2:273"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "214:42:273"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "207:6:273"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "207:50:273"
                  },
                  "nodeType": "YulIf",
                  "src": "204:70:273"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "283:15:273",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "293:5:273"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "283:6:273"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "61:9:273",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "72:7:273",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "84:6:273",
                "type": ""
              }
            ],
            "src": "14:290:273"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
      "id": 273,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "deployedGeneratedSources": [],
  "sourceMap": "1291:721:9:-:0;;;1512:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1551:16:9;;;1291:721;;14:290:273;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:273;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:273:o;:::-;1291:721:9;;;;;;;;;;;",
  "deployedSourceMap": "1291:721:9:-:0;;;;;",
  "source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/amb/CrossChainEnabledAMB.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"../CrossChainEnabled.sol\";\r\nimport \"./LibAMB.sol\";\r\n\r\n/**\r\n * @dev https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB]\r\n * specialization or the {CrossChainEnabled} abstraction.\r\n *\r\n * As of february 2020, AMB bridges are available between the following chains:\r\n *\r\n * - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH ⇌ xDai]\r\n * - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH ⇌ qDai]\r\n * - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH ⇌ ETC]\r\n * - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH ⇌ BSC]\r\n * - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH ⇌ POA]\r\n * - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC ⇌ xDai]\r\n * - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA ⇌ xDai]\r\n * - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby ⇌ xDai]\r\n * - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan ⇌ Sokol]\r\n *\r\n * _Available since v4.6._\r\n */\r\ncontract CrossChainEnabledAMB is CrossChainEnabled {\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    address private immutable _bridge;\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(address bridge) {\r\n        _bridge = bridge;\r\n    }\r\n\r\n    /**\r\n     * @dev see {CrossChainEnabled-_isCrossChain}\r\n     */\r\n    function _isCrossChain() internal view virtual override returns (bool) {\r\n        return LibAMB.isCrossChain(_bridge);\r\n    }\r\n\r\n    /**\r\n     * @dev see {CrossChainEnabled-_crossChainSender}\r\n     */\r\n    function _crossChainSender() internal view virtual override onlyCrossChain returns (address) {\r\n        return LibAMB.crossChainSender(_bridge);\r\n    }\r\n}\r\n",
  "sourcePath": "D:\\work\\www\\yopu_dapp_nft\\contracts\\lib\\openzeppelin\\contracts\\crosschain\\amb\\CrossChainEnabledAMB.sol",
  "ast": {
    "absolutePath": "project:/contracts/lib/openzeppelin/contracts/crosschain/amb/CrossChainEnabledAMB.sol",
    "exportedSymbols": {
      "AMB_Bridge": [
        39115
      ],
      "CrossChainEnabled": [
        925
      ],
      "CrossChainEnabledAMB": [
        975
      ],
      "InvalidCrossChainSender": [
        1239
      ],
      "LibAMB": [
        1019
      ],
      "NotCrossChainCall": [
        1233
      ]
    },
    "id": 976,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 927,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "126:23:9"
      },
      {
        "absolutePath": "project:/contracts/lib/openzeppelin/contracts/crosschain/CrossChainEnabled.sol",
        "file": "../CrossChainEnabled.sol",
        "id": 928,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 976,
        "sourceUnit": 926,
        "src": "153:34:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/lib/openzeppelin/contracts/crosschain/amb/LibAMB.sol",
        "file": "./LibAMB.sol",
        "id": 929,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 976,
        "sourceUnit": 1020,
        "src": "189:22:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 931,
              "name": "CrossChainEnabled",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 925,
              "src": "1324:17:9"
            },
            "id": 932,
            "nodeType": "InheritanceSpecifier",
            "src": "1324:17:9"
          }
        ],
        "canonicalName": "CrossChainEnabledAMB",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 930,
          "nodeType": "StructuredDocumentation",
          "src": "215:1074:9",
          "text": " @dev https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB]\n specialization or the {CrossChainEnabled} abstraction.\n As of february 2020, AMB bridges are available between the following chains:\n - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH ⇌ xDai]\n - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH ⇌ qDai]\n - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH ⇌ ETC]\n - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH ⇌ BSC]\n - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH ⇌ POA]\n - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC ⇌ xDai]\n - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA ⇌ xDai]\n - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby ⇌ xDai]\n - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan ⇌ Sokol]\n _Available since v4.6._"
        },
        "fullyImplemented": true,
        "id": 975,
        "linearizedBaseContracts": [
          975,
          925
        ],
        "name": "CrossChainEnabledAMB",
        "nameLocation": "1300:20:9",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 933,
              "nodeType": "StructuredDocumentation",
              "src": "1349:61:9",
              "text": "@custom:oz-upgrades-unsafe-allow state-variable-immutable"
            },
            "id": 935,
            "mutability": "immutable",
            "name": "_bridge",
            "nameLocation": "1442:7:9",
            "nodeType": "VariableDeclaration",
            "scope": 975,
            "src": "1416:33:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 934,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1416:7:9",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 945,
              "nodeType": "Block",
              "src": "1540:35:9",
              "statements": [
                {
                  "expression": {
                    "id": 943,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 941,
                      "name": "_bridge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 935,
                      "src": "1551:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 942,
                      "name": "bridge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 938,
                      "src": "1561:6:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1551:16:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 944,
                  "nodeType": "ExpressionStatement",
                  "src": "1551:16:9"
                }
              ]
            },
            "documentation": {
              "id": 936,
              "nodeType": "StructuredDocumentation",
              "src": "1458:48:9",
              "text": "@custom:oz-upgrades-unsafe-allow constructor"
            },
            "id": 946,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 939,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 938,
                  "mutability": "mutable",
                  "name": "bridge",
                  "nameLocation": "1532:6:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 946,
                  "src": "1524:14:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 937,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1524:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1523:16:9"
            },
            "returnParameters": {
              "id": 940,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1540:0:9"
            },
            "scope": 975,
            "src": "1512:63:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              918
            ],
            "body": {
              "id": 958,
              "nodeType": "Block",
              "src": "1723:54:9",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 955,
                        "name": "_bridge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 935,
                        "src": "1761:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 953,
                        "name": "LibAMB",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1019,
                        "src": "1741:6:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LibAMB_$1019_$",
                          "typeString": "type(library LibAMB)"
                        }
                      },
                      "id": 954,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isCrossChain",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 995,
                      "src": "1741:19:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 956,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1741:28:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 952,
                  "id": 957,
                  "nodeType": "Return",
                  "src": "1734:35:9"
                }
              ]
            },
            "documentation": {
              "id": 947,
              "nodeType": "StructuredDocumentation",
              "src": "1583:63:9",
              "text": " @dev see {CrossChainEnabled-_isCrossChain}"
            },
            "id": 959,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isCrossChain",
            "nameLocation": "1661:13:9",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 949,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1699:8:9"
            },
            "parameters": {
              "id": 948,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1674:2:9"
            },
            "returnParameters": {
              "id": 952,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 951,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 959,
                  "src": "1717:4:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 950,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1717:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1716:6:9"
            },
            "scope": 975,
            "src": "1652:125:9",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              924
            ],
            "body": {
              "id": 973,
              "nodeType": "Block",
              "src": "1951:58:9",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 970,
                        "name": "_bridge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 935,
                        "src": "1993:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 968,
                        "name": "LibAMB",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1019,
                        "src": "1969:6:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LibAMB_$1019_$",
                          "typeString": "type(library LibAMB)"
                        }
                      },
                      "id": 969,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "crossChainSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1018,
                      "src": "1969:23:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_address_$",
                        "typeString": "function (address) view returns (address)"
                      }
                    },
                    "id": 971,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1969:32:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 967,
                  "id": 972,
                  "nodeType": "Return",
                  "src": "1962:39:9"
                }
              ]
            },
            "documentation": {
              "id": 960,
              "nodeType": "StructuredDocumentation",
              "src": "1785:67:9",
              "text": " @dev see {CrossChainEnabled-_crossChainSender}"
            },
            "id": 974,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 964,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 963,
                  "name": "onlyCrossChain",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 891,
                  "src": "1918:14:9"
                },
                "nodeType": "ModifierInvocation",
                "src": "1918:14:9"
              }
            ],
            "name": "_crossChainSender",
            "nameLocation": "1867:17:9",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 962,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1909:8:9"
            },
            "parameters": {
              "id": 961,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1884:2:9"
            },
            "returnParameters": {
              "id": 967,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 966,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 974,
                  "src": "1942:7:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 965,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1942:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1941:9:9"
            },
            "scope": 975,
            "src": "1858:151:9",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 976,
        "src": "1291:721:9",
        "usedErrors": []
      }
    ],
    "src": "126:1888:9"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.14+commit.80d49f37.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-06-28T15:05:46.841Z",
  "devdoc": {
    "details": "https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB] specialization or the {CrossChainEnabled} abstraction. As of february 2020, AMB bridges are available between the following chains: - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH ⇌ xDai] - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH ⇌ qDai] - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH ⇌ ETC] - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH ⇌ BSC] - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH ⇌ POA] - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC ⇌ xDai] - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA ⇌ xDai] - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby ⇌ xDai] - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan ⇌ Sokol] _Available since v4.6._",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "stateVariables": {
      "_bridge": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}