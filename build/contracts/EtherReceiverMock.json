{
  "contractName": "EtherReceiverMock",
  "abi": [
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "acceptEther",
          "type": "bool"
        }
      ],
      "name": "setAcceptEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"acceptEther\",\"type\":\"bool\"}],\"name\":\"setAcceptEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/lib/openzeppelin/contracts/mocks/EtherReceiverMock.sol\":\"EtherReceiverMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"project:/contracts/lib/openzeppelin/contracts/mocks/EtherReceiverMock.sol\":{\"keccak256\":\"0x7d7c773bd3176fe30907803f3b299d5c52189773d29ab2ef9bd42c46b6b260a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ce41ed2c282d329db9b3195f3278303a770e5cbfe623665838acd076ca03deb\",\"dweb:/ipfs/QmPKUshB56pjyBGBGoNBTqTkvUjiHKNjs5QAjqHsSjATPt\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060c08061001f6000396000f3fe60806040526004361060205760003560e01c80634fea120c14603957600080fd5b3660345760005460ff16603257600080fd5b005b600080fd5b348015604457600080fd5b50603260503660046063565b6000805460ff1916911515919091179055565b600060208284031215607457600080fd5b81358015158114608357600080fd5b939250505056fea26469706673582212207db69c926760e0f2b2ae08f8c140a3cf17523603bdd79085289aae899f272c1264736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361060205760003560e01c80634fea120c14603957600080fd5b3660345760005460ff16603257600080fd5b005b600080fd5b348015604457600080fd5b50603260503660046063565b6000805460ff1916911515919091179055565b600060208284031215607457600080fd5b81358015158114608357600080fd5b939250505056fea26469706673582212207db69c926760e0f2b2ae08f8c140a3cf17523603bdd79085289aae899f272c1264736f6c634300080e0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:289:273",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:273",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "81:206:273",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "127:16:273",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "136:1:273",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "139:1:273",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "129:6:273"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "129:12:273"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "129:12:273"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "102:7:273"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "111:9:273"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "98:3:273"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "98:23:273"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "123:2:273",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "94:3:273"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "94:32:273"
                  },
                  "nodeType": "YulIf",
                  "src": "91:52:273"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "152:36:273",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "178:9:273"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "165:12:273"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "165:23:273"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "156:5:273",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "241:16:273",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "250:1:273",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "253:1:273",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "243:6:273"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "243:12:273"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "243:12:273"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "210:5:273"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "231:5:273"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "224:6:273"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "224:13:273"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "217:6:273"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "217:21:273"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "207:2:273"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "207:32:273"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "200:6:273"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "200:40:273"
                  },
                  "nodeType": "YulIf",
                  "src": "197:60:273"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "266:15:273",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "276:5:273"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "266:6:273"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_bool",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "47:9:273",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "58:7:273",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "70:6:273",
                "type": ""
              }
            ],
            "src": "14:273:273"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
      "id": 273,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "62:272:126:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "62:272:126:-:0;;;;;;;;;;;;;;;;;;;;;;;;275:12;;;;270:54;;304:8;;;270:54;62:272;;;;;130:94;;;;;;;;;;-1:-1:-1;130:94:126;;;;;:::i;:::-;190:12;:26;;-1:-1:-1;;190:26:126;;;;;;;;;;130:94;14:273:273;70:6;123:2;111:9;102:7;98:23;94:32;91:52;;;139:1;136;129:12;91:52;178:9;165:23;231:5;224:13;217:21;210:5;207:32;197:60;;253:1;250;243:12;197:60;276:5;14:273;-1:-1:-1;;;14:273:273:o",
  "source": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract EtherReceiverMock {\r\n    bool private _acceptEther;\r\n\r\n    function setAcceptEther(bool acceptEther) public {\r\n        _acceptEther = acceptEther;\r\n    }\r\n\r\n    receive() external payable {\r\n        if (!_acceptEther) {\r\n            revert();\r\n        }\r\n    }\r\n}\r\n",
  "sourcePath": "D:\\work\\www\\yopu_dapp_nft\\contracts\\lib\\openzeppelin\\contracts\\mocks\\EtherReceiverMock.sol",
  "ast": {
    "absolutePath": "project:/contracts/lib/openzeppelin/contracts/mocks/EtherReceiverMock.sol",
    "exportedSymbols": {
      "EtherReceiverMock": [
        13670
      ]
    },
    "id": 13671,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 13646,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:23:126"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "EtherReceiverMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 13670,
        "linearizedBaseContracts": [
          13670
        ],
        "name": "EtherReceiverMock",
        "nameLocation": "71:17:126",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 13648,
            "mutability": "mutable",
            "name": "_acceptEther",
            "nameLocation": "109:12:126",
            "nodeType": "VariableDeclaration",
            "scope": 13670,
            "src": "96:25:126",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 13647,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "96:4:126",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 13657,
              "nodeType": "Block",
              "src": "179:45:126",
              "statements": [
                {
                  "expression": {
                    "id": 13655,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 13653,
                      "name": "_acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13648,
                      "src": "190:12:126",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 13654,
                      "name": "acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13650,
                      "src": "205:11:126",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "190:26:126",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 13656,
                  "nodeType": "ExpressionStatement",
                  "src": "190:26:126"
                }
              ]
            },
            "functionSelector": "4fea120c",
            "id": 13658,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setAcceptEther",
            "nameLocation": "139:14:126",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13651,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13650,
                  "mutability": "mutable",
                  "name": "acceptEther",
                  "nameLocation": "159:11:126",
                  "nodeType": "VariableDeclaration",
                  "scope": 13658,
                  "src": "154:16:126",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 13649,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "154:4:126",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "153:18:126"
            },
            "returnParameters": {
              "id": 13652,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "179:0:126"
            },
            "scope": 13670,
            "src": "130:94:126",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13668,
              "nodeType": "Block",
              "src": "259:72:126",
              "statements": [
                {
                  "condition": {
                    "id": 13662,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "274:13:126",
                    "subExpression": {
                      "id": 13661,
                      "name": "_acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13648,
                      "src": "275:12:126",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 13667,
                  "nodeType": "IfStatement",
                  "src": "270:54:126",
                  "trueBody": {
                    "id": 13666,
                    "nodeType": "Block",
                    "src": "289:35:126",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 13663,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967277,
                              4294967277
                            ],
                            "referencedDeclaration": 4294967277,
                            "src": "304:6:126",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 13664,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "304:8:126",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 13665,
                        "nodeType": "ExpressionStatement",
                        "src": "304:8:126"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 13669,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13659,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "239:2:126"
            },
            "returnParameters": {
              "id": 13660,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "259:0:126"
            },
            "scope": 13670,
            "src": "232:99:126",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 13671,
        "src": "62:272:126",
        "usedErrors": []
      }
    ],
    "src": "35:301:126"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.14+commit.80d49f37.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-06-28T15:05:47.779Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}