{
  "contractName": "CrossChainEnabled",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information for building cross-chain aware contracts. This abstract contract provides accessors and modifiers to control the execution flow when receiving cross-chain messages. Actual implementations of cross-chain aware contracts, which are based on this abstraction, will  have to inherit from a bridge-specific specialization. Such specializations are provided under `crosschain/<chain>/CrossChainEnabled<chain>.sol`. _Available since v4.6._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/lib/openzeppelin/contracts/crosschain/CrossChainEnabled.sol\":\"CrossChainEnabled\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"project:/contracts/lib/openzeppelin/contracts/crosschain/CrossChainEnabled.sol\":{\"keccak256\":\"0xe3796f669986f88c231262fc454399c7068123d59c6d2721b3e8807e1b5490e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://01dae8a0bedc02610d1eb581a1114ed87afc5f6c0de59b4ffa91fb3d30fc94a7\",\"dweb:/ipfs/QmTEs6tt5TUBxQKnFw4uNPn7ZE59uz3E2hhVKCnKvpzwPh\"]},\"project:/contracts/lib/openzeppelin/contracts/crosschain/errors.sol\":{\"keccak256\":\"0x9d3ffe3bc59c2dac36d93cb4641ffeaa98b96cce588d106efe050a0b67b4d902\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf8c1e49412c6975de84fe2c72f6785f139d36843aaa623bc9964003748b3757\",\"dweb:/ipfs/QmcDPdSYsWHGnMZB6yHH8Tczr16QVjd8TjPcMVDdyvPV1W\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/CrossChainEnabled.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./errors.sol\";\r\n\r\n/**\r\n * @dev Provides information for building cross-chain aware contracts. This\r\n * abstract contract provides accessors and modifiers to control the execution\r\n * flow when receiving cross-chain messages.\r\n *\r\n * Actual implementations of cross-chain aware contracts, which are based on\r\n * this abstraction, will  have to inherit from a bridge-specific\r\n * specialization. Such specializations are provided under\r\n * `crosschain/<chain>/CrossChainEnabled<chain>.sol`.\r\n *\r\n * _Available since v4.6._\r\n */\r\nabstract contract CrossChainEnabled {\r\n    /**\r\n     * @dev Throws if the current function call is not the result of a\r\n     * cross-chain execution.\r\n     */\r\n    modifier onlyCrossChain() {\r\n        if (!_isCrossChain()) revert NotCrossChainCall();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the current function call is not the result of a\r\n     * cross-chain execution initiated by `account`.\r\n     */\r\n    modifier onlyCrossChainSender(address expected) {\r\n        address actual = _crossChainSender();\r\n        if (expected != actual) revert InvalidCrossChainSender(actual, expected);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the current function call is the result of a\r\n     * cross-chain message.\r\n     */\r\n    function _isCrossChain() internal view virtual returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the address of the sender of the cross-chain message that\r\n     * triggered the current function call.\r\n     *\r\n     * IMPORTANT: Should revert with `NotCrossChainCall` if the current function\r\n     * call is not the result of a cross-chain message.\r\n     */\r\n    function _crossChainSender() internal view virtual returns (address);\r\n}\r\n",
  "sourcePath": "D:\\work\\www\\yopu_dapp_nft\\contracts\\lib\\openzeppelin\\contracts\\crosschain\\CrossChainEnabled.sol",
  "ast": {
    "absolutePath": "project:/contracts/lib/openzeppelin/contracts/crosschain/CrossChainEnabled.sol",
    "exportedSymbols": {
      "CrossChainEnabled": [
        925
      ],
      "InvalidCrossChainSender": [
        1239
      ],
      "NotCrossChainCall": [
        1233
      ]
    },
    "id": 926,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 877,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "119:23:8"
      },
      {
        "absolutePath": "project:/contracts/lib/openzeppelin/contracts/crosschain/errors.sol",
        "file": "./errors.sol",
        "id": 878,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 926,
        "sourceUnit": 1240,
        "src": "146:22:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "CrossChainEnabled",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 879,
          "nodeType": "StructuredDocumentation",
          "src": "172:507:8",
          "text": " @dev Provides information for building cross-chain aware contracts. This\n abstract contract provides accessors and modifiers to control the execution\n flow when receiving cross-chain messages.\n Actual implementations of cross-chain aware contracts, which are based on\n this abstraction, will  have to inherit from a bridge-specific\n specialization. Such specializations are provided under\n `crosschain/<chain>/CrossChainEnabled<chain>.sol`.\n _Available since v4.6._"
        },
        "fullyImplemented": false,
        "id": 925,
        "linearizedBaseContracts": [
          925
        ],
        "name": "CrossChainEnabled",
        "nameLocation": "699:17:8",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 890,
              "nodeType": "Block",
              "src": "871:79:8",
              "statements": [
                {
                  "condition": {
                    "id": 884,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "886:16:8",
                    "subExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 882,
                        "name": "_isCrossChain",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 918,
                        "src": "887:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                          "typeString": "function () view returns (bool)"
                        }
                      },
                      "id": 883,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "887:15:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 888,
                  "nodeType": "IfStatement",
                  "src": "882:48:8",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 885,
                        "name": "NotCrossChainCall",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1233,
                        "src": "911:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 886,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "911:19:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 887,
                    "nodeType": "RevertStatement",
                    "src": "904:26:8"
                  }
                },
                {
                  "id": 889,
                  "nodeType": "PlaceholderStatement",
                  "src": "941:1:8"
                }
              ]
            },
            "documentation": {
              "id": 880,
              "nodeType": "StructuredDocumentation",
              "src": "724:115:8",
              "text": " @dev Throws if the current function call is not the result of a\n cross-chain execution."
            },
            "id": 891,
            "name": "onlyCrossChain",
            "nameLocation": "854:14:8",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 881,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "868:2:8"
            },
            "src": "845:105:8",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 911,
              "nodeType": "Block",
              "src": "1150:150:8",
              "statements": [
                {
                  "assignments": [
                    897
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 897,
                      "mutability": "mutable",
                      "name": "actual",
                      "nameLocation": "1169:6:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 911,
                      "src": "1161:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 896,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1161:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 900,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 898,
                      "name": "_crossChainSender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 924,
                      "src": "1178:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                        "typeString": "function () view returns (address)"
                      }
                    },
                    "id": 899,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1178:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1161:36:8"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 903,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 901,
                      "name": "expected",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 894,
                      "src": "1212:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 902,
                      "name": "actual",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 897,
                      "src": "1224:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1212:18:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 909,
                  "nodeType": "IfStatement",
                  "src": "1208:72:8",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "id": 905,
                          "name": "actual",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 897,
                          "src": "1263:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 906,
                          "name": "expected",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 894,
                          "src": "1271:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 904,
                        "name": "InvalidCrossChainSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1239,
                        "src": "1239:23:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$__$",
                          "typeString": "function (address,address) pure"
                        }
                      },
                      "id": 907,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1239:41:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 908,
                    "nodeType": "RevertStatement",
                    "src": "1232:48:8"
                  }
                },
                {
                  "id": 910,
                  "nodeType": "PlaceholderStatement",
                  "src": "1291:1:8"
                }
              ]
            },
            "documentation": {
              "id": 892,
              "nodeType": "StructuredDocumentation",
              "src": "958:138:8",
              "text": " @dev Throws if the current function call is not the result of a\n cross-chain execution initiated by `account`."
            },
            "id": 912,
            "name": "onlyCrossChainSender",
            "nameLocation": "1111:20:8",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 895,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 894,
                  "mutability": "mutable",
                  "name": "expected",
                  "nameLocation": "1140:8:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 912,
                  "src": "1132:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 893,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1132:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1131:18:8"
            },
            "src": "1102:198:8",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "documentation": {
              "id": 913,
              "nodeType": "StructuredDocumentation",
              "src": "1308:115:8",
              "text": " @dev Returns whether the current function call is the result of a\n cross-chain message."
            },
            "id": 918,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "_isCrossChain",
            "nameLocation": "1438:13:8",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 914,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1451:2:8"
            },
            "returnParameters": {
              "id": 917,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 916,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 918,
                  "src": "1485:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 915,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1485:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1484:6:8"
            },
            "scope": 925,
            "src": "1429:62:8",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "documentation": {
              "id": 919,
              "nodeType": "StructuredDocumentation",
              "src": "1499:283:8",
              "text": " @dev Returns the address of the sender of the cross-chain message that\n triggered the current function call.\n IMPORTANT: Should revert with `NotCrossChainCall` if the current function\n call is not the result of a cross-chain message."
            },
            "id": 924,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "_crossChainSender",
            "nameLocation": "1797:17:8",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 920,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1814:2:8"
            },
            "returnParameters": {
              "id": 923,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 922,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 924,
                  "src": "1848:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 921,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1848:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1847:9:8"
            },
            "scope": 925,
            "src": "1788:69:8",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 926,
        "src": "681:1179:8",
        "usedErrors": []
      }
    ],
    "src": "119:1743:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.14+commit.80d49f37.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-06-28T15:05:46.837Z",
  "devdoc": {
    "details": "Provides information for building cross-chain aware contracts. This abstract contract provides accessors and modifiers to control the execution flow when receiving cross-chain messages. Actual implementations of cross-chain aware contracts, which are based on this abstraction, will  have to inherit from a bridge-specific specialization. Such specializations are provided under `crosschain/<chain>/CrossChainEnabled<chain>.sol`. _Available since v4.6._",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}