{
  "contractName": "LibAMB",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Primitives for cross-chain aware contracts using the https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB] family of bridges.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/lib/openzeppelin/contracts/crosschain/amb/LibAMB.sol\":\"LibAMB\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"project:/contracts/lib/openzeppelin/contracts/crosschain/amb/LibAMB.sol\":{\"keccak256\":\"0x4286b9007b0dba2b7f2125cfa2d975e8afc000f95e8a6335e93490c513ebacc7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://68c9ae8ebd13565779f3fad2bf05e38a379161b8cc3f1c8899339b2d0edbbed1\",\"dweb:/ipfs/QmQXc6WWPx934QbspccDY4GG4jnUgNUbiJ74YpwnaA36cH\"]},\"project:/contracts/lib/openzeppelin/contracts/crosschain/errors.sol\":{\"keccak256\":\"0x9d3ffe3bc59c2dac36d93cb4641ffeaa98b96cce588d106efe050a0b67b4d902\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf8c1e49412c6975de84fe2c72f6785f139d36843aaa623bc9964003748b3757\",\"dweb:/ipfs/QmcDPdSYsWHGnMZB6yHH8Tczr16QVjd8TjPcMVDdyvPV1W\"]},\"project:/contracts/lib/openzeppelin/contracts/vendor/amb/IAMB.sol\":{\"keccak256\":\"0x6465aca00eb1dcb80e8c1ee25dab810bce5471c462fc279adfcecfdbb860a42a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e15f5eeafc82ad37c41f863b61755c39e969040f903578e5fb756e633c198b00\",\"dweb:/ipfs/QmS8JWfzvepeNmb8pu6LpWVLwmWBDZTGLUZxxZKeMWLRXh\"]}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122045816843d25ebd4a9f42b5c09c9432bcac7816d44d87ac1599d456c669e33f6d64736f6c634300080e0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122045816843d25ebd4a9f42b5c09c9432bcac7816d44d87ac1599d456c669e33f6d64736f6c634300080e0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "390:847:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;390:847:10;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "390:847:10:-:0;;;;;;;;",
  "source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/amb/LibAMB.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport {IAMB as AMB_Bridge} from \"../../vendor/amb/IAMB.sol\";\r\nimport \"../errors.sol\";\r\n\r\n/**\r\n * @dev Primitives for cross-chain aware contracts using the\r\n * https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB]\r\n * family of bridges.\r\n */\r\nlibrary LibAMB {\r\n    /**\r\n     * @dev Returns whether the current function call is the result of a\r\n     * cross-chain message relayed by `bridge`.\r\n     */\r\n    function isCrossChain(address bridge) internal view returns (bool) {\r\n        return msg.sender == bridge;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the sender that triggered the current\r\n     * cross-chain message through `bridge`.\r\n     *\r\n     * NOTE: {isCrossChain} should be checked before trying to recover the\r\n     * sender, as it will revert with `NotCrossChainCall` if the current\r\n     * function call is not the result of a cross-chain message.\r\n     */\r\n    function crossChainSender(address bridge) internal view returns (address) {\r\n        if (!isCrossChain(bridge)) revert NotCrossChainCall();\r\n        return AMB_Bridge(bridge).messageSender();\r\n    }\r\n}\r\n",
  "sourcePath": "D:\\work\\www\\yopu_dapp_nft\\contracts\\lib\\openzeppelin\\contracts\\crosschain\\amb\\LibAMB.sol",
  "ast": {
    "absolutePath": "project:/contracts/lib/openzeppelin/contracts/crosschain/amb/LibAMB.sol",
    "exportedSymbols": {
      "AMB_Bridge": [
        39115
      ],
      "InvalidCrossChainSender": [
        1239
      ],
      "LibAMB": [
        1019
      ],
      "NotCrossChainCall": [
        1233
      ]
    },
    "id": 1020,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 977,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "112:23:10"
      },
      {
        "absolutePath": "project:/contracts/lib/openzeppelin/contracts/vendor/amb/IAMB.sol",
        "file": "../../vendor/amb/IAMB.sol",
        "id": 979,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1020,
        "sourceUnit": 39116,
        "src": "139:61:10",
        "symbolAliases": [
          {
            "foreign": {
              "id": 978,
              "name": "IAMB",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39115,
              "src": "147:4:10",
              "typeDescriptions": {}
            },
            "local": "AMB_Bridge",
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/lib/openzeppelin/contracts/crosschain/errors.sol",
        "file": "../errors.sol",
        "id": 980,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1020,
        "sourceUnit": 1240,
        "src": "202:23:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "LibAMB",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 981,
          "nodeType": "StructuredDocumentation",
          "src": "229:159:10",
          "text": " @dev Primitives for cross-chain aware contracts using the\n https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB]\n family of bridges."
        },
        "fullyImplemented": true,
        "id": 1019,
        "linearizedBaseContracts": [
          1019
        ],
        "name": "LibAMB",
        "nameLocation": "398:6:10",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 994,
              "nodeType": "Block",
              "src": "620:46:10",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 992,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 989,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "638:3:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 990,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "638:10:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 991,
                      "name": "bridge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 984,
                      "src": "652:6:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "638:20:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 988,
                  "id": 993,
                  "nodeType": "Return",
                  "src": "631:27:10"
                }
              ]
            },
            "documentation": {
              "id": 982,
              "nodeType": "StructuredDocumentation",
              "src": "412:135:10",
              "text": " @dev Returns whether the current function call is the result of a\n cross-chain message relayed by `bridge`."
            },
            "id": 995,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isCrossChain",
            "nameLocation": "562:12:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 985,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 984,
                  "mutability": "mutable",
                  "name": "bridge",
                  "nameLocation": "583:6:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 995,
                  "src": "575:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 983,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "575:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "574:16:10"
            },
            "returnParameters": {
              "id": 988,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 987,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 995,
                  "src": "614:4:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 986,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "614:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "613:6:10"
            },
            "scope": 1019,
            "src": "553:113:10",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1017,
              "nodeType": "Block",
              "src": "1110:124:10",
              "statements": [
                {
                  "condition": {
                    "id": 1006,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1125:21:10",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 1004,
                          "name": "bridge",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 998,
                          "src": "1139:6:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1003,
                        "name": "isCrossChain",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 995,
                        "src": "1126:12:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                          "typeString": "function (address) view returns (bool)"
                        }
                      },
                      "id": 1005,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1126:20:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1010,
                  "nodeType": "IfStatement",
                  "src": "1121:53:10",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1007,
                        "name": "NotCrossChainCall",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1233,
                        "src": "1155:17:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 1008,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1155:19:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 1009,
                    "nodeType": "RevertStatement",
                    "src": "1148:26:10"
                  }
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "id": 1012,
                            "name": "bridge",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 998,
                            "src": "1203:6:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1011,
                          "name": "AMB_Bridge",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39115,
                          "src": "1192:10:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IAMB_$39115_$",
                            "typeString": "type(contract IAMB)"
                          }
                        },
                        "id": 1013,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1192:18:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IAMB_$39115",
                          "typeString": "contract IAMB"
                        }
                      },
                      "id": 1014,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "messageSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 39034,
                      "src": "1192:32:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 1015,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1192:34:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1002,
                  "id": 1016,
                  "nodeType": "Return",
                  "src": "1185:41:10"
                }
              ]
            },
            "documentation": {
              "id": 996,
              "nodeType": "StructuredDocumentation",
              "src": "674:356:10",
              "text": " @dev Returns the address of the sender that triggered the current\n cross-chain message through `bridge`.\n NOTE: {isCrossChain} should be checked before trying to recover the\n sender, as it will revert with `NotCrossChainCall` if the current\n function call is not the result of a cross-chain message."
            },
            "id": 1018,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "crossChainSender",
            "nameLocation": "1045:16:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 999,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 998,
                  "mutability": "mutable",
                  "name": "bridge",
                  "nameLocation": "1070:6:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 1018,
                  "src": "1062:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 997,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1062:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1061:16:10"
            },
            "returnParameters": {
              "id": 1002,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1001,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1018,
                  "src": "1101:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1000,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1101:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1100:9:10"
            },
            "scope": 1019,
            "src": "1036:198:10",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1020,
        "src": "390:847:10",
        "usedErrors": []
      }
    ],
    "src": "112:1127:10"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.14+commit.80d49f37.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-06-28T15:05:46.847Z",
  "devdoc": {
    "details": "Primitives for cross-chain aware contracts using the https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB] family of bridges.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}